Interfaces, exceptions and utils
================================

The naming of things can be confusing when using Bluetooth LE, due to the many possible meanings of
words like "device" or "service" depending on the context. Here is a quick breakdown of the main object
types used in bleak and their meaning, roughly in the order in which you will often use them in your code:

* :py:class:`bleak.BleakScanner` finds advertising BLE devices
* :py:class:`bleak.backends.device.BLEDevice` the representation (think: name or address) of such a BLE device
* :py:class:`bleak.BleakClient` an open connection to a BLE device
* :py:class:`bleak.backends.service.BleakGATTService` the name (or address) of a service implemented in a BLE device
* :py:class:`bleak.backends.service.BleakGATTCharacteristic` the name (or address) of a charactieristic (think: attribute or variable) implemented by such a service

You can then read and write characteristic values by calling methods of :py:class:`bleak.backends.device.BLEDevice`,
passing the :py:class:`bleak.backends.service.BleakGATTCharacteristic` of the value you are interested in.

Connecting
----------

Usually you will use the top-level :py:class:`bleak.BleakClient` object to connect to a BLE 
device annd communicate with it. This class inherits the correct implementation 
for your platform. Some of the methods, especially the constructor, may have 
additional platform-specific arguments which you can find in the relevant 
implementation section.


Client interface
~~~~~~~~~~~~~~~~

.. autoclass:: bleak.BleakClient
    :members:
    :inherited-members:

Client Windows implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.winrt.client
    :members:

Client MacOS implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.corebluetooth.client
    :members:

Client Linux Distributions with BlueZ implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.bluezdbus.client
    :members:

Client Python-for-Android/Kivy implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.p4android.client
    :members:

Client base class
~~~~~~~~~~~~~~~~~

The base class is usually not used directly, it is documented mainly for convenience
of people writing a new backend.

.. automodule:: bleak.backends.client
    :members:

Scanning
--------

Usually you will use the top-level BleakScanner object to scan for BLE 
devices. This class inherits the correct implementation 
for your platform. The constructor may have 
additional platform-specific arguments which you can find in the relevant 
implementation section.

Scanner interface
~~~~~~~~~~~~~~~~~

.. autoclass:: bleak.BleakScanner
    :members:

Scanner Windows implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.winrt.scanner
    :members:

Scanner MacOS implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.corebluetooth.scanner
    :members:

Scanner Linux Distributions with BlueZ implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.bluezdbus.scanner
    :members:

Scanner Python-for-Android/Kivy implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.p4android.scanner
    :members:

Scanner base class
~~~~~~~~~~~~~~~~~~

.. automodule:: bleak.backends.scanner
    :members:


Class representing BLE devices
------------------------------

Generated by :py:meth:`bleak.discover` and :py:class:`bleak.BleakScanner`.

.. automodule:: bleak.backends.device
    :members:

GATT objects
------------

.. automodule:: bleak.backends.service
    :members:

.. automodule:: bleak.backends.characteristic
    :members:

.. automodule:: bleak.backends.descriptor
    :members:


Exceptions
----------

.. automodule:: bleak.exc
    :members:

Utilities
---------

.. automodule:: bleak.uuids
    :members:
